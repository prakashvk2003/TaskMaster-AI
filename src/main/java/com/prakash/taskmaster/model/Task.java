package com.prakash.taskmaster.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.index.Indexed;
import org.springframework.data.mongodb.core.mapping.Document;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Set; // Using Set to avoid duplicate dependency IDs

@Data // Bundles @ToString, @EqualsAndHashCode, @Getter, @Setter, @RequiredArgsConstructor
@NoArgsConstructor
@AllArgsConstructor
@Builder // Provides the builder pattern
@Document(collection = "tasks") // Specifies the MongoDB collection name
public class Task {

    @Id
    private String id; // MongoDB typically uses String IDs

    private String title;
    private String description;

    @Indexed // Indexing status can improve query performance
    private TaskStatus status;
    private TaskPriority priority; // Can be initially null, set by user or AI

    // Timestamps
    @CreatedDate // Automatically set by Spring Data MongoDB if auditing is enabled
    private LocalDateTime createdAt;
    @Indexed // Indexing scheduled time can be useful for finding due tasks
    private LocalDateTime scheduledAt; // When the task is planned to start
    private LocalDateTime startedAt;   // When the task actually started
    private LocalDateTime completedAt; // When the task was completed or cancelled/failed

    // AI-Generated Fields (Examples)
    private String aiAnalysisNotes; // Store raw AI analysis notes if needed
    private Integer estimatedDurationMinutes; // AI-estimated time
    private List<String> suggestedSubtasks; // AI-suggested breakdown
    private List<String> executionSteps;    // Generated by TaskExecutionAgent

    // --- Dependency Fields ---
    /**
     * Set of Task IDs that this task depends on.
     * This task cannot start until all tasks in this set are COMPLETED.
     */
    @Indexed // Indexing dependencies might help certain queries, though maybe less common
    private Set<String> dependsOnTaskIds; // IDs of prerequisite tasks

    // --- Helper Methods for Dependencies (Optional but useful) ---

    public void addDependency(String taskId) {
        if (this.dependsOnTaskIds == null) {
            this.dependsOnTaskIds = new java.util.HashSet<>();
        }
        // Avoid depending on self
        if (this.id != null && !this.id.equals(taskId)) {
            this.dependsOnTaskIds.add(taskId);
        } else if (this.id == null && taskId != null){ // Handle case before task has ID? Less likely needed here.
            this.dependsOnTaskIds.add(taskId);
        }
    }

    public void removeDependency(String taskId) {
        if (this.dependsOnTaskIds != null) {
            this.dependsOnTaskIds.remove(taskId);
        }
    }

    public boolean hasDependencies() {
        return this.dependsOnTaskIds != null && !this.dependsOnTaskIds.isEmpty();
    }
}